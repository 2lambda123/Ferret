\cancel mode verify
! polyshape.jnl
! *4/99 *sh* and *jd*

! Description: define xpolyshape, ypolyshape variables for polygon fills

!   usage:
!	GO polyshape shape_name

! shape names include:
!    triangle		delta		square
!    diamond		pentagon	hexagon
!    circle		star		plus
!    ex

! example:
!	yes? GO polyshape star 2   ! define double-sized star

! check shape name
query/ignore $1"|triangle|delta|square|diamond|pentagon|hexagon|circle|star|plus|ex|"

IF $1"|triangle>1|*>0|" THEN
  let xpolyshape = COS(3.14159/180 * X[X=90:`2*120+90`:120])
  let ypolyshape = SIN(3.14159/180 * X[X=90:`2*120+90`:120])
ENDIF

IF $1"|delta>1|*>0|" THEN
  let xpolyshape = COS(3.14159/180 * X[X=30:`2*120+30`:120])
  let ypolyshape = SIN(3.14159/180 * X[X=30:`2*120+30`:120])
ENDIF

IF $1"|square>1|*>0|" THEN
  let xpolyshape = COS(3.14159/180 * X[X=45:`3*90+45`:90])
  let ypolyshape = SIN(3.14159/180 * X[X=45:`3*90+45`:90])
ENDIF

IF $1"|diamond>1|*>0|" THEN
  let xpolyshape = 0.8 * COS(3.14159/180 * X[X=0:`3*90+0`:90])
  let ypolyshape = 0.8 * SIN(3.14159/180 * X[X=0:`3*90+0`:90])
ENDIF

IF $1"|pentagon>1|*>0|" THEN
  let xpolyshape = 0.9 * COS(3.14159/180 * X[X=90:`4*72+90`:72])
  let ypolyshape = 0.9 * SIN(3.14159/180 * X[X=90:`4*72+90`:72])
ENDIF

IF $1"|hexagon>1|*>0|" THEN
  let xpolyshape = 0.8 * COS(3.14159/180 * X[X=0:`5*60+0`:60])
  let ypolyshape = 0.8 * SIN(3.14159/180 * X[X=0:`5*60+0`:60])
ENDIF

IF $1"|circle>1|*>0|" THEN
  let xpolyshape = 0.8 * COS(3.14159/180 * X[X=0:`23*15+0`:15])
  let ypolyshape = 0.8 * SIN(3.14159/180 * X[X=0:`23*15+0`:15])
ENDIF

IF $1"|star>1|*>0|" THEN
  !let xpen = COS(3.14159/180 * X[X=90:`4*72+90`:72])
  !let ypen = SIN(3.14159/180 * X[X=90:`4*72+90`:72])
  !poly/xlimits=-1:1/ylimits=-1:1 xpen,ypen,0
  !let xpeni = 0.3*COS(3.14159/180 * X[X=`90-36`:`4*72+90-36`:72])
  !let ypeni = 0.3*SIN(3.14159/180 * X[X=`90-36`:`4*72+90-36`:72])
  !poly/over/line/xlimits=-1:1/ylimits=-1:1 xpeni,ypeni,0
  let xpolyshape = { 0.17634 , 0.00000 , -0.17634, -0.95106,  -0.28532,   -0.58779,    0.00000 ,    0.58778 ,    0.28532 ,    0.95106 }
  let ypolyshape =  { 0.24270,  1.00000,  0.24271,  0.30902,  -0.09270,   -0.80902,  -0.30000,   -0.80902,   -0.09271,   0.30901 }
ENDIF

IF $1"|plus>1|*>0|" THEN
  let poly_d = .2
  let xpolyshape = 0.8 * {`-1*poly_d`,`-1*poly_d`,-1,-1,`-1*poly_d`,`-1*poly_d`,`poly_d`,`poly_d`,1,1,`poly_d`,`poly_d`}
  let ypolyshape = 0.8 * {1,`poly_d`,`poly_d`,`-1*poly_d`,`-1*poly_d`,-1,-1,`-1*poly_d`,`-1*poly_d`,`poly_d`,`poly_d`,1}
  cancel variable poly_d
ENDIF

IF $1"|ex>1|*>0|" THEN
let poly_h = .7
let poly_d = .15
  ! note: V4.91 bug: cant handle all these grave pairs
!  let xpolyshape = {`poly_h-poly_d`,0,`-1*(poly_h-poly_d)`,`-1*(poly_h+poly_d)`,`-2*poly_d`,`-1*(poly_h+poly_d)`,`-1*(poly_h-poly_d)`,0,`poly_h-poly_d`,`poly_h+poly_d`,.3,`poly_h+poly_d`}
!  let ypolyshape = {`poly_h+poly_d`,.3,`poly_h+poly_d`, `poly_h-poly_d`,0,`-1*(poly_h-poly_d)`,`-1*(poly_h+poly_d)`,`-2*poly_d`,`-1*(poly_h+poly_d)`,`-1*(poly_h-poly_d)`,0,`poly_h-poly_d`}
  let xpolyshape = {`poly_h-poly_d`,0,`-1*(poly_h-poly_d)`,`-1*(poly_h+poly_d)`,`-2*poly_d`,`-1*(poly_h+poly_d)`,`-1*(poly_h-poly_d)`,0,`poly_h-poly_d`,`poly_h+poly_d`,`2*poly_d`,`poly_h+poly_d`}
  let ypolyshape = {`poly_h+poly_d`,`2*poly_d`,`poly_h+poly_d`, `poly_h-poly_d`,0,`-1*(poly_h-poly_d)`,`-1*(poly_h+poly_d)`,`-2*poly_d`,`-1*(poly_h+poly_d)`,`-1*(poly_h-poly_d)`,0,`poly_h-poly_d`}
  cancel variable poly_d, poly_h
ENDIF

set mode/last verify
