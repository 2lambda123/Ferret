\cancel mode verify
! trackplot.jnl
! 4/99 *sh* and *jd*

! Description: Plot values of a variable alongside a plotted track

! Usage:                  $1        $2     $3     $4     $5       $6
! yes?  GO trackplot plot_command xtrack ytrack values [scale] [smooth]
! $1 - the plot command with qualifiers (eg PLOT/VS/OVER/LINE=2)
! $2 - X coordinates of track to be plotted
! $3 - Y coordinates of track to be plotted
! $4 - variable whose values will be plotted along the track (eg SST)
! $5 - scale the values by this factor (optional, default 1)
! $6 - smooth the track to be plotted with SBX:$6 (optional, default 3)

! example
!	GO trackplot plot/vs/over/line=2 lon lat values

! argument check
QUERY/IGNORE $1"<usage: yes? GO trackplot plot_command xtrack ytrack values [scale] [smooth]"
QUERY/IGNORE $2"<usage: yes? GO trackplot plot_command xtrack ytrack values [scale] [smooth]"
QUERY/IGNORE $3"<usage: yes? GO trackplot plot_command xtrack ytrack values [scale] [smooth]"

! save the input expressions into simple variable definitions
LET/QUIET TRKx = ($2)
LET/QUIET TRKy = ($3)
LET/QUIET TRKdata = ($4)

! determine the orientation of the data (and check that it is 1D)
DEFINE SYMBOL TRKax `TRKx,return=shape`

LET/QUIET TRKxscale = ((($xaxis_max))-(($xaxis_min)))/($ppl$xlen)
LET/QUIET TRKyscale = ((($yaxis_max))-(($yaxis_min)))/($ppl$ylen)

! compute factor to compensate for unequal scaling of X and Y plot axes
LET/QUIET TRKaxscale_factor = TRKyscale/TRKxscale
LET/QUIET TRKx_correction = (1 + TRKaxscale_factor^2)^0.5
LET/QUIET TRKy_correction = TRKaxscale_factor * TRKx_correction

! compute the local normal vector components -- (COS,SIN) --> (-SIN,COS)
! this will be used to createoffsets from track line
LET/QUIET TRKdx0 = MISSING(TRKx[($TRKax)=@ddc],MISSING(TRKx[($TRKax)=@ddf],TRKx[($TRKax)=@ddb])) * TRKaxscale_factor

LET/QUIET TRKdy0 = MISSING(TRKy[($TRKax)=@ddc],MISSING(TRKy[($TRKax)=@ddf],TRKy[($TRKax)=@ddb]))

LET/QUIET TRKds_mag = (TRKdx0^2+TRKdy0^2)^0.5
LET/QUIET TRKxnorm0 = TRKx_correction * (-1 *  TRKdy0 / TRKds_mag)
LET/QUIET TRKynorm0 = TRKy_correction * TRKdx0 / TRKds_mag

! smooth the normal vectors ...
LET/QUIET TRKxnorm = MISSING(TRKxnorm0[($TRKax)=@sbx:$6"3"],TRKxnorm0)
LET/QUIET TRKynorm = MISSING(TRKynorm0[($TRKax)=@sbx:$6"3"],TRKynorm0)

! determine default scale
LET/QUIET TRKyrange = (($yaxis_max))-(($yaxis_min))
LET/QUIET TRKdata_range = TRKdata[($TRKax)=@max] - TRKdata[($TRKax)=@min]
LET/QUIET TRKdefault_scale = 0.1 * TRKyrange/TRKdata_range

LET/QUIET TRKscale = $5"1" * TRKdefault_scale 

LET/QUIET TRKxplot = TRKx + TRKscale*TRKxnorm*TRKdata
LET/QUIET TRKyplot = TRKy + TRKscale*TRKynorm*TRKdata

$1/vs TRKxplot,TRKyplot

cancel symbol TRK*
cancel variable TRK*
set mode/last verify
