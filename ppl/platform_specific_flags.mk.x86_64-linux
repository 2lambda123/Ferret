#
# platform_specific_includes.mk.x86_64-linux
#
# This file is included in other Makefiles and defines
# platform specific macros

	GKS_INCLUDES	= -I../../ppl/include/xgks \
			  -I../../xgks/src/lib \
			  -Ipplinc/xgks \
			  -I../../xgks/port 

	INCLUDES        = -I. \
			  -I../fmt/cmn/ \
			  -I../common \
			  -I../../fmt/cmn \
			  -I../../ppl/include \
			  $(GKS_INCLUDES) \
			  -I/use/local/include

	FINCLUDES	= -I../../ppl/tmap_inc \
			  -I../include \
			  -I../../fmt/cmn \
			  -I../common \
			  -I../../ppl/include \
			  -I../../fer/common

	PLATFORM = $(shell uname -s -r) 64-bit

	CC              = gcc
	FC		= gfortran
	F77		= gfortran

	RANLIB          = /usr/bin/ranlib

	CPP		= /lib/cpp

	CPP_FLAGS       = $(INCLUDES) \
			  -m64 \
			  -fPIC -Dunix -Dgfortran   \
			  -DNO_OPEN_SHARED \
			  -DNO_OPEN_RECORDTYPE -DNO_SNGL  \
			  -DX_REFRESH -Dreclen_in_bytes  \
			  -DNO_OPEN_READONLY -DMANDATORY_FORMAT_WIDTHS\
			  -DNO_OPEN_CARRIAGECONTROL -Dxgks -DSTAR_1_SUPPORTED \
			  -DFULL_GUI_VERSION -DX_REFRESH \
			  -DXT_CODE  -DLINUX -DNO_PASSED_CONCAT \
			  -Dcrptd_cat_argument \
			  -DG77_SIGNAL -DG77 \
			  -DNEED_IAND -DINTERNAL_READ_FORMAT_BUG \
			  -DNO_PREPEND_STRING -DNO_DOUBLE_ESCAPE_SLASH \
			  -Ddouble_p 

# -DusingDODSf2cUnderscore needed if using netcdf library...
# also consider -ffloat-store.
	CFLAGS          = $(CPP_FLAGS) \
			  -Dlint -D_SSIZE_T -DVOID_SIGHANDLER -D_POSIX_VERSION -DLINUX \
			  -DFULL_GUI_VERSION -DX_REFRESH -DXT_CODE -Dsun4 
	FFLAGS          = $(CPP_FLAGS) \
			  -fno-automatic -DusingDODSf2cUnderscore -fno-second-underscore \
			  -fdollar-ok -ffixed-line-length-132 -ffpe-trap=overflow $(FINCLUDES)
	PPLUS_FFLAGS    = $(CPP_FLAGS) \
			  -fno-automatic -DusingDODSf2cUnderscore -fno-second-underscore \
			  -fdollar-ok -ffixed-line-length-132 $(FINCLUDES)

#	PROF_FLAGS	= -pg

# cancel the default rule for .f -> .o to prevent objects from being built
# from .f files that are out-of-date with respect to their corresponding .F file
%.o : %.f

# use cpp to preprocess the .F files to .f files and then compile the .f files
%.o : %.F
	rm -f $*.f	 
	$(CPP) -P -traditional $(CPP_FLAGS) $(<F) | sed -e 's/de    /de /g' | sed -e 's/de         /de /g' > $*.f
	$(F77) $(FFLAGS) -c $*.f	 

#
# End of platform_specific_includes.mk.x86_64-linux
#
