      SUBROUTINE XYZPLT
C** 
C**    @(#)xyzplt.F	1.1    3/10/88
C**
C**
C***********************************************************************
C**
C**                 PLOT+ Scientific Graphics System
C**
C***********************************************************************
C**
C**
C
C     CALL XYZPLT
C
C     THIS SUBROUTINE PERFORMS WINDOW CLIPPING IAND THEN MOVES THE
C     PEN FROM THE CURRENT POSITION TO A NEW POINT.
C
C
      DIMENSION XMXMN(2),YMXMN(2)
      EQUIVALENCE (XMXMN(1),XMAX),(YMXMN(1),YMAX)
C
#ifdef unix
	include 'pplinc/PLTCOM.DAT'
#else
	include 'pplinc:PLTCOM.DAT'
#endif
C
C     CHECK THE PLOTTING MODE.
C
      IF(PMODE .EQ. ALPHA)GO TO 30
C
C     CHECK THE PEN POSITION.
C
      IF(PENF)GO TO 10
C
C     TEMPORARILY STORE THE NEW POSITION.
C
      XNEW = XTEMP
      YNEW = YTEMP
      ZNEW = ZTEMP
      SAVEF = .TRUE.
      RETURN
C
C     CHECK THE PLOTTING MODE.
C
   10 IF(PMODE .NE. POINT)GO TO 20
      XNEW = XTEMP
      YNEW = YTEMP
      ZNEW = ZTEMP
      GO TO 30
C
C     IF THE LAST POINT WAS NOT PLOTTED BECAUSE THE PEN WAS UP,
C     PLOT THE POINT NOW.
C
   20 IF(.NOT. SAVEF)GO TO 60
      PENF = .FALSE.
   30 IF(.NOT. WINDOF)GO TO 40
C
C     CALCULATE THE NEW OFF-WINDOW FLAG.
C
      OWFLG = 0
      IF(XNEW .GT. XMAX)OWFLG = 1
      IF(XNEW .LT. XMIN)OWFLG = 2
      IF(YNEW .GT. YMAX)OWFLG = OWFLG + 4
      IF(YNEW .LT. YMIN)OWFLG = OWFLG + 8
C
C     CHECK THE NEW POINT TO SEE IF IT IS WITHIN THE BOUNDARY OF
C     THE WINDOW.  IF NOT, DO NOT PLOT IT.
C
      IF(OWFLG .NE. 0)GO TO 50
C
C     TRANSFORM THE POINT TO THE SCREEN COORDINATE SYSTEM.
C
   40 CALL TFORM(XNEW,YNEW,ZNEW)
C
C     PLOT TO THE POINT.
C
      CALL ABPLT
C
C     MOVE THE COORDINATES OF THE NEW POINT TO THE OLD POINT.
C
   50 XOLD = XNEW
      YOLD = YNEW
      ZOLD = ZNEW
      LOWFLG = OWFLG
      SAVEF = .FALSE.
C
C     CHECK THE PLOTTING MODE.
C
      IF(PMODE .EQ. POINT .OR. PMODE .EQ. ALPHA)RETURN
      PENF = .TRUE.
      IF(PMODE .NE. DASH)GO TO 60
C
C     REINITIALIZE THE SEGMENT COUNTER.
C
      IDSEG = 1
      SEG = DSEG(1)
   60 XNEW = XTEMP
      YNEW = YTEMP
      ZNEW = ZTEMP
      IF(.NOT. WINDOF)GO TO 120
C
C     CALCULATE THE NEW OFF-WINDOW FLAG.
C
      OWFLG = 0
      IF(XNEW .GT. XMAX)OWFLG = 1
      IF(XNEW .LT. XMIN)OWFLG = 2
      IF(YNEW .GT. YMAX)OWFLG = OWFLG + 4
      IF(YNEW .LT. YMIN)OWFLG = OWFLG + 8
C
C     CHECK THE OLD AND NEW POINTS TO SEE IF THEY ARE BOTH OUT-
C     SIDE THE BOUNDARY OF THE WINDOW IN THE SAME DIRECTION.  IF
C     SO, NO INTERCEPT EXISTS.
C
C	RSX-11M
C
C      IF(IIAND(LOWFLG,OWFLG) .NE. 0)GO TO 190
C
C	END RSX-11M
C
C	VAX/VMS
C
#ifdef unix
	IF(AND(LOWFLG,OWFLG) .NE. 0)GOTO 190
#else
	IF(IAND(LOWFLG,OWFLG) .NE. 0)GOTO 190
#endif
C
C	END VAX/VMS
C
C
C     CHECK THE OLD POINT TO SEE IF IT IS WITHIN THE BOUNDARY OF
C     THE WINDOW.  IF NOT, COMPUTE THE INTERCEPT.
C
      IF(LOWFLG .EQ. 0)GO TO 90
C
C     CHECK THE HORIZONTAL LIMITS OF THE WINDOW.
C
#ifdef unix
C*JD* 3.26.91 choose sun's ifdef for ultrix
C*JD*         #ifdefsun
      IF(rSHIFT(LOWFLG,2) .EQ. 0)GO TO 70
C*JD*         #else
C*JD*         IF(LSHIFT(LOWFLG,-2) .EQ. 0)GO TO 70
C*JD*         #endif
#else
      IF(ISHFT(LOWFLG,-2) .EQ. 0)GO TO 70
#endif
C
C     THE POINT IS OUTSIDE THE HORIZONTAL LIMITS OF THE WINDOW.
C     CALCULATE THE INTERCEPT.
C
#ifdef unix
C*JD* 3.26.91 choose sun's ifdef for ultrix
C*JD*         #ifdef sun
      YINTER = YMXMN(rSHIFT(LOWFLG,2))
C*JD*         #else
C*JD*         YINTER = YMXMN(LSHIFT(LOWFLG,-2))
C*JD*         #endif
#else
      YINTER = YMXMN(ISHFT(LOWFLG,-2))
#endif
      ZINTER = (ZNEW - ZOLD) * (YINTER - YOLD) / (YNEW - YOLD) +
     * ZOLD
      XINTER = (XNEW - XOLD) * (YINTER - YOLD) / (YNEW - YOLD) +
     * XOLD
C
C     CHECK THE INTERCEPT TO INSURE THAT IT IS ON THE BOUNDARY
C     OF THE WINDOW.
C
      IF(XINTER + 0.001 .GE. XMIN .AND. XINTER - 0.001 .LE. XMAX)
     * GO TO 80
C
C     THE POINT IS OUTSIDE THE VERTICAL LIMITS OF THE WINDOW.
C     CALCULATE THE INTERCEPT.
C
#ifdef unix
   70 XINTER = XMXMN(AND(LOWFLG,3))
#else
   70 XINTER = XMXMN(IAND(LOWFLG,3))
#endif
      YINTER = (YNEW - YOLD) * (XINTER - XOLD) / (XNEW - XOLD) +
     * YOLD
      ZINTER = (ZNEW - ZOLD) * (XINTER - XOLD) / (XNEW - XOLD) +
     * ZOLD
C
C     CHECK THE INTERCEPT TO INSURE THAT IT IS ON THE BOUNDARY
C     OF THE WINDOW.
C
      IF(YINTER + 0.001 .LT. YMIN .OR. YINTER - 0.001 .GT. YMAX)
     * GO TO 190
C
C     TRANSFORM THE INTERCEPT TO THE SCREEN COORDINATE SYSTEM.
C
   80 CALL TFORM(XINTER,YINTER,ZINTER)
      XOLD = XINTER
      YOLD = YINTER
      ZOLD = ZINTER
      AOLD = ANEW
      BOLD = BNEW
C
C     CALCULATE THE OLD OFF-SCREEN FLAG.
C
      LOSFLG = 0
      IF(AOLD - 0.001 .GT. AMAX)LOSFLG = 1
      IF(AOLD + 0.001 .LT. AMIN)LOSFLG = 2
      IF(BOLD - 0.001 .GT. BMAX)LOSFLG = LOSFLG + 4
      IF(BOLD + 0.001 .LT. BMIN)LOSFLG = LOSFLG + 8
C
C     CHECK THE NEW POINT TO SEE IF IT IS WITHIN THE BOUNDARY OF
C     THE WINDOW.  IF NOT, COMPUTE THE INTERCEPT.
C
   90 IF(OWFLG .EQ. 0)GO TO 120
C
C     CHECK THE HORIZONTAL LIMITS OF THE WINDOW.
C
#ifdef unix
C *JD* 3.26.91 choose sun's ifdef for ultrix
C*JD*        #ifdef sun
      IF(rSHIFT(OWFLG,2) .EQ. 0)GO TO 100
C*JD*        #else
C*JD*        IF(LSHIFT(OWFLG,-2) .EQ. 0)GO TO 100
C*JD*        #endif
#else
      IF(ISHFT(OWFLG,-2) .EQ. 0)GO TO 100
#endif
C
C     THE POINT IS OUTSIDE THE HORIZONTAL LIMITS OF THE WINDOW.
C     CALCULATE THE INTERCEPT.
C
#ifdef unix
C *JD* 3.26.91 choose sun's ifdef for ultrix
C*JD*      #ifdef sun
      YINTER = YMXMN(rSHIFT(OWFLG,2))
C*JD*      #else
C*JD*      YINTER = YMXMN(LSHIFT(OWFLG,-2))
C*JD*      #endif
#else
      YINTER = YMXMN(ISHFT(OWFLG,-2))
#endif
      ZINTER = (ZNEW - ZOLD) * (YINTER - YOLD) / (YNEW - YOLD) +
     * ZOLD
      XINTER = (XNEW - XOLD) * (YINTER - YOLD) / (YNEW - YOLD) +
     * XOLD
C
C     CHECK THE INTERCEPT TO INSURE THAT IT IS ON THE BOUNDARY
C     OF THE WINDOW.
C
      IF(XINTER + 0.001 .GE. XMIN .AND. XINTER - 0.001 .LE. XMAX)
     * GO TO 110
C
C     THE POINT IS OUTSIDE THE VERTICAL LIMITS OF THE WINDOW.
C     CALCULATE THE INTERCEPT.
C
#ifdef unix
  100 XINTER = XMXMN(AND(OWFLG,3))
#else
  100 XINTER = XMXMN(IAND(OWFLG,3))
#endif
      YINTER = (YNEW - YOLD) * (XINTER - XOLD) / (XNEW - XOLD) +
     * YOLD
      ZINTER = (ZNEW - ZOLD) * (XINTER - XOLD) / (XNEW - XOLD) +
     * ZOLD
C
C     CHECK THE PLOTTING MODE.
C
  110 IF(PMODE .EQ. VECTOR)GO TO 160
      DX = XINTER - XOLD
      DY = YINTER - YOLD
      DZ = ZINTER - ZOLD
      GO TO 130
C
C     CHECK THE PLOTTING MODE.
C
  120 IF(PMODE .EQ. VECTOR)GO TO 170
      DX = XNEW - XOLD
      DY = YNEW - YOLD
      DZ = ZNEW - ZOLD
C
C     INITIALIZE VARIABLES IN PREPARATION FOR DRAWING A DASHED
C     LINE.
C
  130 DIST = SQRT(DX * DX + DY * DY + DZ * DZ)
      IF(DIST .EQ. 0.0)GO TO 150
      COSX = DX / DIST
      COSY = DY / DIST
      COSZ = DZ / DIST
C
C     DRAW A DASHED LINE ONE SEGMENT AT A TIME.
C
#ifdef unix
  140 PENF = AND(IDSEG,1) .NE. 0
#else
  140 PENF = IAND(IDSEG,1) .NE. 0
#endif
      IF(SEG .GE. DIST)GO TO 150
      XOLD = XOLD + SEG * COSX
      YOLD = YOLD + SEG * COSY
      ZOLD = ZOLD + SEG * COSZ
C
C     TRANSFORM THE END OF THE SEGMENT TO THE SCREEN COORDINATE
C     SYSTEM.
C
      CALL TFORM(XOLD,YOLD,ZOLD)
C
C     PLOT TO THE END OF THE SEGMENT.
C
      CALL ABPLT
      DIST = DIST - SEG
#ifdef unix
      IDSEG = AND(IDSEG,3) + 1
#else
      IDSEG = IAND(IDSEG,3) + 1
#endif
      SEG = DSEG(IDSEG)
      GO TO 140
  150 SEG = SEG - DIST
C
C     CHECK THE NEW POINT TO SEE IF IT IS WITHIN THE BOUNDARY OF
C     THE WINDOW.  IF NOT, PLOT TO THE INTERCEPT.
C
      IF(OWFLG .EQ. 0)GO TO 170
C
C     TRANSFORM THE INTERCEPT TO THE SCREEN COORDINATE SYSTEM.
C
  160 CALL TFORM(XINTER,YINTER,ZINTER)
      GO TO 180
C
C     TRANSFORM THE POINT TO THE SCREEN COORDINATE SYSTEM.
C
  170 CALL TFORM(XNEW,YNEW,ZNEW)
C
C     PLOT TO THE POINT.
C
  180 CALL ABPLT
C
C     MOVE THE COORDINATES OF THE NEW POINT TO THE OLD POINT.
C
  190 XOLD = XNEW
      YOLD = YNEW
      ZOLD = ZNEW
      LOWFLG = OWFLG
      RETURN
C
      END
